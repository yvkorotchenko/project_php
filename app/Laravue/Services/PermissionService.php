<?phpnamespace App\Laravue\Services;use App\Laravue\Models\Permission;use Illuminate\Contracts\Pagination\LengthAwarePaginator;class PermissionService extends DefaultSettingService {    public function all()    {        return Permission::where('hidden', (string)self::ITEMS_PER_DEFAULT_VISIBLE)->orderByDesc('sort')->get();    }    public function list(array $limitPage): LengthAwarePaginator    {        $permissionQuery = Permission::query();        $limit = $limitPage['limit'];        $visible = $limitPage['visible'];        return $permissionQuery//                ->where('hidden', $visible)                ->orderByDesc('sort')                ->paginate(null);    }    public function create(array $permission): Permission    {        $permissions = new Permission([            'name' => $permission['name'],            'hidden' => (string)$permission['visible'],            'sort' => $permission['sort'],        ]);        $permissions->save();        $permissions->refresh();        return $permissions;    }    public function update(array $permissionData, Permission $permission): Permission    {        $permission->fill([            'name' => $permissionData['name'],            'hidden' => (string)$permissionData['visible'],            'sort' => $permissionData['sort'],        ]);        $permission->save();        return $permission;    }    public function delete(int $permissionId): bool    {        $permission = Permission::find($permissionId);        return $permission->delete();    }    public function destroyList(array $permissionListIds): bool    {        return Permission::whereIn('id', $permissionListIds['ids'])->delete();    }}